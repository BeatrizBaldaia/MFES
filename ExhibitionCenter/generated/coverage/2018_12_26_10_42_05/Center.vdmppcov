class Center
types
-- TODO Define types here
values
-- TODO Define values here
instance variables
	public name: Utils`String;
	public installations: map Utils`String to Installation;
	inv card dom installations > 0 and 
	forall id in set dom installations &  installations(id).id = id;
	public services: map Service`ServiceType to Service := {|->};
	inv forall type in set dom services & services(type).type = type;
operations
	public Center:  Utils`String * Installation ==> Center
		Center(n, inst) == (
			let instID = inst.getID() in
			installations := {instID |-> inst};
			name := n;
		)
		post card dom installations = 1 and name = n;

-- Add one installation to installations set		
	public addInstallations: Installation ==> ()
		addInstallations(inst) == let instID = inst.getID() in 
		installations := installations ++ {instID |-> inst}
		pre inst not in set rng installations and isofbaseclass(Installation, inst)
		post card dom installations = card dom installations~ + 1 and inst in set rng installations;

-- Add one service to services set
	public addService: Service ==> ()
		addService(serv) == let type = serv.type in
		services := services ++ {type |-> serv}
		pre serv not in set rng services
		post card dom services = card dom services~ + 1 and serv in set rng services;
		
-- Changes a service price
	public changeServicePrice: Service`ServiceType * real ==> ()
	changeServicePrice(serviceType, price) == def service = services(serviceType) in
	service.setPrice(price)
	pre price > 0 and serviceType in set dom services
	post services(serviceType).price = price;
	
-- Add installation, foyer or room, to other installation, auditorium or pavilion\
	public addInstallationToInstallation: Utils`String * Installation ==> ()
	addInstallationToInstallation(instID, inst1) == (
		installations := installations ++ {inst1.id |-> inst1};
		def inst2 = installations(instID) in (
			if(isofclass(Foyer, inst1)) then def foyer = narrow_(inst1, Foyer) in inst2.addFoyer(foyer)
			elseif(isofclass(Room, inst1)) then def room = narrow_(inst1, Room) in inst2.addRoom(room)
			--TODO: else error 
		)
	)
	pre instID in set dom installations and
	(isofclass(Foyer, inst1) or isofclass(Room, inst1)) and
	not exists inst in set rng installations & (
		(isofclass(Auditorium, inst) or isofclass(Pavilion, inst)) and
		hasInstallation(inst1, inst)
	) and (
		(isofclass(Foyer, inst1) and (isofclass(Auditorium, installations(instID)) or isofclass(Pavilion, installations(instID)))) or
		(isofclass(Room, inst1) and isofclass(Pavilion, installations(instID)))
	)
	post inst1 in set rng installations and hasInstallation(inst1, installations(instID));
	
	-- Remove installation, foyer or room, to other installation, auditorium or pavilion\
	public removeInstallationFromInstallation: Utils`String * Installation ==> ()
	removeInstallationFromInstallation(instID, inst1) == (
		def inst2 = installations(instID) in (
			if(isofclass(Foyer, inst1)) then def foyer = narrow_(inst1, Foyer) in inst2.removeFoyer(foyer)
			elseif(isofclass(Room, inst1)) then def room = narrow_(inst1, Room) in inst2.removeRoom(room)
			--TODO: else error 
		)
	)
	pre instID in set dom installations and
	inst1 in set rng installations and
	(isofclass(Foyer, inst1) or isofclass(Room, inst1)) and
	let inst = installations(instID) in hasInstallation(inst1, inst) and (
		(isofclass(Foyer, inst1) and (isofclass(Auditorium, installations(instID)) or isofclass(Pavilion, installations(instID)))) or
		(isofclass(Room, inst1) and isofclass(Pavilion, installations(instID)))
	)
	post inst1 in set rng installations and
	not hasInstallation(inst1, installations(instID));
	
-- Remove installation from installations map
	public removeInstallation: Utils`String ==> ()
	removeInstallation(instID) == (
		let inst in set rng installations \ {installations(instID)} in
			if(hasInstallation(installations(instID), inst)) then removeInstallationFromInstallation(inst.id, installations(instID));
		installations := {instID} <-: installations
	)
	pre instID in set dom installations
	post instID not in set dom installations and
	not exists inst in set rng installations & hasInstallation(installations(instID), inst);
		
functions
-- Verify if pavilion has a specific installation (room or foyer)
	public hasInstallation: Installation * Installation -> bool
	hasInstallation(inst1, inst2) == (
		if (isofclass(Auditorium, inst2)) then (
			let inst = narrow_(inst2, Auditorium) in
			if(isofclass(Foyer, inst1)) then let foyer = narrow_(inst1, Foyer) in foyer in set inst.foyers
			else false
		) else (
			let inst = narrow_(inst2, Pavilion) in
			if(isofclass(Foyer, inst1)) then let foyer = narrow_(inst1, Foyer) in foyer in set inst.foyers
			else let room = narrow_(inst1, Room) in room in set inst.rooms
		)
	)
	pre (isofclass(Foyer, inst1) or isofclass(Room, inst1)) and
	(isofclass(Auditorium, inst2) or isofclass(Pavilion, inst2));
end Center