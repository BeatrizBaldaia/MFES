class User
instance variables
	public name: Utils`String := "default_name";
	public password: Utils`String := "pass1234";
	public events: [set of Utils`String] := {};

operations
--Constructor
	public User: Utils`String * Utils`String ==> User
	User(n, p) == (
		name := n;
		password := p
	)
	pre n <> "" and p <> ""
	post name = n and password = p;
	
--Shows all user information
	public showDetails: () ==> map Utils`String to Utils`String
	showDetails() == (
		dcl res: map Utils`String to Utils`String := {|->};
		res := res ++ {
				"Name" |-> name, "Tickets bought" |-> eventsSetToString(events)
		};
		return res
	);
	
--Add event
	public addEvent: Utils`String ==> ()
	addEvent(evName) == events := events union {evName}
	pre evName not in set events
	post evName in set events;
	
--Remove event
	public removeEvent: Utils`String ==> ()
	removeEvent(evName) == events := events \ {evName}
	pre evName in set events
	post evName not in set events;
	
--Checks if this user attend the event
	public attendEvent: Utils`String ==> bool
	attendEvent(evName) == return evName in set events;
	
--Converts set of events to string
	public eventsSetToString: [set of Utils`String] ==> Utils`String
	eventsSetToString(events_var) == (
		dcl res: Utils`String := "";
		if(card events_var = 0) then return "";
		for all event in set events_var do res := res ^ event ^ ", ";
		res := res(1, ..., len res - 2);
		return res
	);
end User