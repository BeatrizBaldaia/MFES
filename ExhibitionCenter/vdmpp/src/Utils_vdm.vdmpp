class Utils_vdm
types
	public Date :: 	year : nat
									month: nat
									day : nat
				inv d == d.month <= 12 and d.day <= DaysOfMonth(d.year, d.month);
	public String = seq of char
	ord a < b == a = b;
values
functions

--Checks if date b is before date a
	public before: Date * Date -> bool 
	before(b, a) ==
		b.year < a.year or
		(b.year = a.year and b.month < a.month) or
		(b.year = a.year and b.month = a.month and b.day < a.day)
	pre true
	post RESULT = (b.year < a.year or (b.year = a.year and b.month < a.month) or (b.year = a.year and b.month = a.month and b.day < a.day));

--Get the number os days per month
	public DaysOfMonth: nat * nat -> nat 
		DaysOfMonth(y, m) ==
					if (m = 2)
					then
							(if (isLeapYear(y))
							then 29
							else 28)
	        else (31 - (m - 1) mod 7 mod 2)
		pre y > 0 and m > 0 and m < 13
		post (m = 2 and isLeapYear(y) and RESULT = 29) or
			(m = 2 and not isLeapYear(y) and RESULT = 28) or
			(RESULT = (31 - (m - 1) mod 7 mod 2)); 

--Checks if this year is a leap year (with 366 days)			
	public isLeapYear: nat -> bool
	isLeapYear(y) == 
		y mod 4 = 0 and y mod 100 <> 0 or y mod 400 = 0
	pre y > 0
	post RESULT = (y mod 4 = 0 and y mod 100 <> 0 or y mod 400 = 0);
	
--Calculates the difference between two dates
	public getDatesDifference: Date * Date -> int
	getDatesDifference(date1, date2) == (
		dateCount(date2.year, date2.month, 1, date2.year * 365 + date2.day) -
		dateCount(date1.year, date1.month, 1, date1.year * 365 + date1.day)
	)
	pre date1 = date2 or before(date1, date2)
	post RESULT >= 0;
	
	public dateCount: nat * nat * int * nat -> int
	dateCount(year, month, i, res) == ( 
    if(i = month) then res
    else dateCount(year, month, i + 1, res + DaysOfMonth(year, i))
	)
	pre year > 0 and month > 0 and i > 0 and res > 0;

-- Curried Function
-- Received function can return a boolean or an element of the same map value type
-- Apply a generic function to all map elements and change them (when function returns an element) or
-- filter the ones that verify the condition (when function returns a boolen)
	public fMap[@keyType, @returnType, @valueType]: (@valueType -> @returnType) -> seq of @keyType * (map @keyType to @valueType) -> (map @keyType to @valueType)
	fMap (f)(keys, m) ==
	if keys = [] then {|->}
	else let key = hd keys in (
		let res = f(m(key)) in (
				if(res = true) then {key|->m(key)} ++ (fMap[@keyType, @returnType, @valueType] (f)(tl keys, m))
				else fMap[@keyType, @returnType, @valueType] (f)(tl keys, m)
		)
	)
	pre elems keys subset dom m
	post dom RESULT subset elems keys
	measure mfMap[@keyType, @returnType, @valueType](f, keys, m);

-- fMap measure function
	public mfMap[@keyType, @returnType, @valueType]: (@valueType -> @returnType) * seq of @keyType * (map @keyType to @valueType) -> nat
	mfMap (-, keys, -) == len keys;
	
--Turns set into seq
	public setTOseq[@elem]: set of @elem -> seq of @elem
	setTOseq(tmpSet) == (
		[x | x in set tmpSet]
	)
	post elems RESULT subset tmpSet;
	

	
-- converts an element to string
--	public toStringVDM[@elem]: @elem -> String
--	toStringVDM(value) == (
--		cases true:
--			(is_String(value)) -> value,
--			(is_Date(value)) -> datetoStringVDM(value),
--			(is_nat(value)) -> nattoStringVDM(value),
--			(is_real(value)) -> nattoStringVDM(value) ^ [',', ' '] ^ nattoStringVDM(getRemainder(value, 0)),
--			(is_bool(value)) -> booltoStringVDM(value)
--		end
--	)
--	measure 1;
-- converts an element to string
	public toStringVDM: String -> String
	toStringVDM(value) == (
		value
	)
	measure 1;
	public toStringVDM: bool -> String
	toStringVDM(value) == (
		booltoStringVDM(value)
	)
	measure 1;
	public toStringVDM: Date -> String
	toStringVDM(value) == (
		datetoStringVDM(value)
	)
	measure 1;
	public toStringVDM: real -> String
	toStringVDM(value) == (
		nattoStringVDM(value) ^ [',', ' '] ^ nattoStringVDM(getRemainder(value, 0))
	)
	measure 1;
	
	public booltoStringVDM: bool -> String
	booltoStringVDM(value) == if(value) then "yes" else "no";
	
	public datetoStringVDM: Date -> String
	datetoStringVDM(value) == nattoStringVDM(value.day) ^ ['/'] ^ nattoStringVDM(value.month) ^ ['/'] ^ nattoStringVDM(value.year);

	public nattoStringVDM: real -> String
	nattoStringVDM(value) == (
		if(floor(value) < 10) then mapNat(floor(value))
		else nattoStringVDM(floor(value) div 10) ^ mapNat(floor(value) rem 10)
	);
	
	public getRemainder: real * int -> int
	getRemainder(value, n) == (
		if(is_int(value)) then value rem (10 ** n)
		else getRemainder(value * 10, n + 1)
	);
	
	public mapNat: nat -> String
	mapNat(n) == (
		cases n:
			0 -> "0",
			1 -> "1",
			2 -> "2",
			3 -> "3",
			4 -> "4",
			5 -> "5",
			6 -> "6",
			7 -> "7",
			8 -> "8",
			9 -> "9"
		end
	);


end Utils_vdm