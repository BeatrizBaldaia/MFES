class Event
types
	public EventType=<Conference> | <TradeFair> | <Party> | <Musical> | <TeamBuilding>;
instance variables
	public name: Utils_vdm`String := "untitled";
	public totalTickets: nat := 1;
	inv totalTickets > 0;
	public ticketPrice: real := 0;
	public begin: Utils_vdm`Date := mk_Utils_vdm`Date(2018, 1, 1);
	public ending: Utils_vdm`Date := mk_Utils_vdm`Date(2018, 1, 2);
	public privacy: bool := false;
	public type: [EventType] := nil;
	inv begin = ending or Utils_vdm`before(begin, ending);
	public installation: Installation;
	inv installation <> undefined;
	public services: [seq of Service`ServiceType] := [];
	public attendees: [set of Utils_vdm`String] := {};
	inv card attendees <= totalTickets;
	public staff: [set of Utils_vdm`String] := {};
	public host: Utils_vdm`String := "undefined";
	inv host not in set attendees and host not in set staff and host <> "undefined";
	inv forall attendee in set attendees & attendee not in set staff;
	public guests: [set of Utils_vdm`String] := {};
	inv if(not privacy) then guests = {} else true;
operations

--Constructor
	public Event: Utils_vdm`String * nat * real * Utils_vdm`Date * Utils_vdm`Date * bool * EventType * Installation * Utils_vdm`String ==> Event
	Event(n, tTickets, tPrice, b, e, p, t, inst, h) == (
		atomic(installation := inst; host := h);
		name := n;
		totalTickets := tTickets;
		ticketPrice := tPrice;
		atomic(begin := b; ending := e);
		privacy := p;
		type := t;
	)
	pre tTickets > 0 and (b = e or Utils_vdm`before(b, e));

--Set event name
	public setName: Utils_vdm`String ==> ()
	setName(n) == name := n
	post name = n;
--Set event number of tickets
	public setTotalTickets: nat ==> ()
	setTotalTickets(tTickets) == totalTickets := tTickets
	pre tTickets > 0 and tTickets >= card attendees
	post totalTickets = tTickets;
--Set event price of tickets
	public setTicketPrice: nat ==> ()
	setTicketPrice(tPrice) == ticketPrice := tPrice
	pre tPrice >= 0
	post ticketPrice = tPrice;
--Set event begin date
	public setBeginDate: Utils_vdm`Date ==> ()
	setBeginDate(b) == begin := b
	pre Utils_vdm`before(b, ending)
	post begin = b;
--Set event ending date
	public setEndingDate: Utils_vdm`Date ==> ()
	setEndingDate(e) == ending := e
	pre Utils_vdm`before(begin, e)
	post ending = e;
--Set event privacy condition
	public setPrivacy: bool ==> ()
	setPrivacy(p) == (
		privacy := p;
		if(p) then guests := attendees
	)
	post privacy = p;
--Set event type
	public setType: EventType ==> ()
	setType(t) == type := t
	pre t in set {<Conferences>, <TradeFair>, <Party>, <Musical>, <TeamBuilding>}
	post type = t;
	
--Shows all event information
	public showDetails: () ==> map Utils_vdm`String to Utils_vdm`String
	showDetails() == (
		dcl res: map Utils_vdm`String to Utils_vdm`String := {|->};
		res := res ++ {
				"Name" |-> name, "Total number of tickets" |-> Utils_vdm`toStringVDM(totalTickets), "Sold tickets" |-> Utils_vdm`toStringVDM(totalTickets - card attendees),
				"Ticket's price" |-> Utils_vdm`toStringVDM(ticketPrice), "Is private" |-> Utils_vdm`toStringVDM(privacy), 
				"Starting date" |-> Utils_vdm`toStringVDM(begin), "Ending date" |-> Utils_vdm`toStringVDM(ending), 
				"Installation" |-> installation.id, 
				"Event type" |-> typetoStringVDM(type),
				"Services" |-> servicestoStringVDM(),
				"Attendees" |-> usersSettoStringVDM(attendees),
				"Staff" |-> usersSettoStringVDM(staff),
				"Host" |-> host
		};
		if(privacy) then res := res ++ {"Guests" |-> usersSettoStringVDM(guests)};
		return res
	);
	
--Changes the installation where the event will occur
	public changeInstallation: Installation ==> ()
	changeInstallation(inst) == installation := inst
	pre inst <> installation
	post installation = inst;
	
--Add one service to services sequence
	public addService: Service`ServiceType ==> ()
	addService(service) == services := services ^ [service]
	pre service not in set elems services
	post len services = len services~ + 1 and service in set elems services;

--Remove one service from services sequence
	public removeService: Service`ServiceType ==> ()
	removeService(service) == (
		dcl tmpServices: seq of Service`ServiceType := services;
		services := [];
		while(tmpServices <> []) do (
			if(hd tmpServices <> service) then services := services ^ [hd tmpServices];
			tmpServices := tl tmpServices
		)
	)
	pre service in set elems services
	post service not in set elems services;

--Returns how much did the event earned 	
	public earnedMoney: () ==> real
	earnedMoney() == return card attendees * ticketPrice
	post RESULT = card attendees * ticketPrice;

--Return the number of tickets that are left
	public remainingTickets: () ==> nat
	remainingTickets() == return totalTickets - card attendees
	post RESULT = totalTickets - card attendees;
	
--Change event's host
	public setHost: Utils_vdm`String ==> ()
	setHost(user) == (
		if(user in set attendees) then attendees := attendees \ {user}
		elseif(user in set staff) then staff := staff \ {user};
		host := user
	)
	post host = user;
	
--Add attendee to the event
	public addAttendee: Utils_vdm`String ==> ()
	addAttendee(user) == attendees := attendees union {user}
	pre user not in set attendees and card attendees < totalTickets and
		user not in set staff and user <> host
	post user in set attendees;
	
--Add user to staff set 
	public addStaff: Utils_vdm`String ==> ()
	addStaff(user) == staff := staff union {user}
	pre user not in set staff and
		user not in set attendees and user <> host
	post user in set staff;
	
--Remove attendee
	public removeAttendee: Utils_vdm`String ==> ()
	 removeAttendee(user) == attendees := attendees \ {user}
	 pre user in set attendees
	 post user not in set attendees;
	 
--Remove user from staff set
	public removeStaff: Utils_vdm`String ==> ()
	 removeStaff(user) == staff := staff \ {user}
	 pre user in set staff
	 post user not in set staff;

--Invite user to private event
	public inviteUser: Utils_vdm`String * Utils_vdm`String ==> ()
	inviteUser(h, user) == guests := guests union {user}
	pre h = host and user <> host and 
		privacy and user not in set staff and
		card guests < totalTickets
	post user in set guests;
	
--Converts service set to string
	public servicestoStringVDM: () ==> Utils_vdm`String
	servicestoStringVDM() == (
		dcl res: Utils_vdm`String := "";
		if(len services = 0) then return "";
		for all service in set elems services do res := res ^ Service`typetoStringVDM(service) ^ ", ";
		res := res(1, ..., len res - 2);
		return res
	);

--Converts set of users to string
	public usersSettoStringVDM: [set of Utils_vdm`String] ==> Utils_vdm`String
	usersSettoStringVDM(users) == (
		dcl res: Utils_vdm`String := "";
		if(card users = 0) then return "";
		for all user in set users do res := res ^ user ^ ", ";
		res := res(1, ..., len res - 2);
		return res
	);
	
functions

--Converts event type to string
	public typetoStringVDM: EventType -> Utils_vdm`String
	typetoStringVDM(t) == (
		cases t:
			<Conference> -> "Conference",
			<TradeFair> -> "Trade Fair",
			<Party> -> "Party",
			<Musical> -> "Musical",
			<TeamBuilding> -> "Team Building"
		end
	)
	pre t in set {<Conference>, <TradeFair>, <Party>, <Musical>, <TeamBuilding>};
	
end Event