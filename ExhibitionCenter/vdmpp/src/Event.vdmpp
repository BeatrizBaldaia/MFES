class Event
types
	public EventType=<Conference> | <TradeFair> | <Party> | <Musical> | <TeamBuilding>;
instance variables
	public name: Utils`String := "untitled";
	public totalTickets: nat := 1;
	inv totalTickets > 0;
	public ticketPrice: real := 0;
	public begin: Utils`Date := mk_Utils`Date(2018, 1, 1);
	public ending: Utils`Date := mk_Utils`Date(2018, 1, 2);
	public privacy: bool := false;
	public type: [EventType] := nil;
	inv begin = ending or Utils`before(begin, ending);
	public installation: Installation;
	public services: [seq of Service`ServiceType] := [];
	public attendees: [set of Utils`String] := {};
	inv card attendees <= totalTickets;
	public staff: [set of Utils`String] := {};
	public host: Utils`String := "undefined";
	inv host not in set attendees and host not in set staff;
	inv forall attendee in set attendees & attendee not in set staff;
operations

--Constructor
	public Event: Utils`String * nat * real * Utils`Date * Utils`Date * bool * EventType * Installation * User ==> Event
	Event(n, tTickets, tPrice, b, e, p, t, inst, h) == (
		name := n;
		totalTickets := tTickets;
		ticketPrice := tPrice;
		atomic(begin := b; ending := e);
		privacy := p;
		type := t;
		installation := inst;
		host := h.name
	)
	pre tTickets > 0 and Utils`before(b,e);

--Set event name
	public setName: Utils`String ==> ()
	setName(n) == name := n
	post name = n;
--Set event number of tickets
	public setTotalTickets: nat ==> ()
	setTotalTickets(tTickets) == totalTickets := tTickets
	pre tTickets > 0
	post totalTickets = tTickets;
--Set event price of tickets
	public setTicketPrice: nat ==> ()
	setTicketPrice(tPrice) == ticketPrice := tPrice
	pre tPrice >= 0
	post ticketPrice = tPrice;
--Set event begin date
	public setBeginDate: Utils`Date ==> ()
	setBeginDate(b) == begin := b
	pre Utils`before(b, ending)
	post begin = b;
--Set event ending date
	public setEndingDate: Utils`Date ==> ()
	setEndingDate(e) == ending := e
	pre Utils`before(begin, e)
	post ending = e;
--Set event privacy condition
	public setPrivacy: bool ==> ()
	setPrivacy(p) == privacy := p
	post privacy = p;
--Set event type
	public setType: EventType ==> ()
	setType(t) == type := t
	pre t in set {<Conferences>, <TradeFair>, <Party>, <Musical>, <TeamBuilding>}
	post type = t;
	
--Changes the installation where the event will occur
	public changeInstallation: Installation ==> ()
	changeInstallation(inst) == installation := inst
	post installation = inst;
	
--Add one service to services sequence
	public addService: Service`ServiceType ==> ()
	addService(service) == services := services ^ [service]
	pre service not in set elems services
	post len services = len services~ + 1 and service in set elems services;

--Remove one service from services sequence
	public removeService: Service`ServiceType ==> ()
	removeService(service) == (
		dcl tmpServices: seq of Service`ServiceType := services;
		services := [];
		while(tmpServices <> []) do (
			if(hd tmpServices <> service) then services := services ^ [hd tmpServices];
			tmpServices := tl tmpServices
		)
	)
	pre service in set elems services
	post service not in set elems services;

--Returns how much did the event earned 	
	public earnedMoney: () ==> real
	earnedMoney() == return card attendees * ticketPrice
	post RESULT = card attendees * ticketPrice;

--Return the number of tickets that are left
	public remainingTickets: () ==> nat
	remainingTickets() == return totalTickets - card attendees
	post RESULT = totalTickets - card attendees;
	
--Change event's host
	public setHost: Utils`String ==> ()
	setHost(user) == (
		if(user in set attendees) then attendees := attendees \ {user}
		elseif(user in set attendees) then staff := staff \ {user};
		host := user
	)
	pre user not in set attendees and user not in set staff
	post host = user;
	
--Add attendee to the event
	public addAttendee: Utils`String ==> ()
	addAttendee(user) == attendees := attendees union {user}
	pre user not in set attendees and card attendees < totalTickets and
		user not in set staff and user <> host
	post user in set attendees;
	
--Add user to staff set 
	public addStaff: Utils`String ==> ()
	addStaff(user) == staff := staff union {user}
	pre user not in set staff and
		user not in set attendees and user <> host
	post user in set staff;
	
--Remove attendee
	public removeAttendee: Utils`String ==> ()
	 removeAttendee(user) == attendees := attendees \ {user}
	 pre user in set attendees
	 post user not in set attendees;
	 
--Remove user from staff set
	public removeStaff: Utils`String ==> ()
	 removeStaff(user) == staff := staff \ {user}
	 pre user in set staff
	 post user not in set staff;

end Event