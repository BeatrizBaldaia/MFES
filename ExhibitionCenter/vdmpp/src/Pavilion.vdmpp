class Pavilion is subclass of Installation
instance variables
	public rooms: set of Room := {};
	public foyers: set of Foyer := {};
operations
-- Constructor (must have telephones, soundproofWalls and movingWalls always false)
	public Pavilion: Utils`String * real * nat * real * real * real * bool * bool * bool * bool * bool ==> Pavilion
		Pavilion(i, pr, c, h, w, l, airC, natL, ceilL, blackC, compN) == (
			--Measures
			id := i;
			price := pr;
			capacity := c;
			heigth := h;
			atomic(width := w; lenght := l; area := w * l);
			--Conditions
			airCondition := airC;
			naturalLigth := natL;
			ceilingLighting := ceilL;
			blackOutCurtains := blackC;
			computerNetwork := compN;
		)
		pre c > 0 and h > 0 and w > 0 and l > 0
		post not (telephones or soundproofWalls or movingWalls);
--Impossible to create a installation with out parameters
		public Pavilion: () ==> Pavilion
		Pavilion() == return self
		pre false;

--Change installation's conditions	
	public setConditions: bool * bool * bool * bool * bool * bool * bool * bool ==> ()
		setConditions(airC, natL, ceilL, blackC, -, compN, -, -) == (
			airCondition := airC;
			naturalLigth := natL;
			ceilingLighting := ceilL;
			blackOutCurtains := blackC;
			computerNetwork := compN
		)
		post not (telephones or soundproofWalls or movingWalls);
--Shows all installation information
	public showDetails: () ==> map Utils`String to Utils`String
	showDetails() == (
		dcl res: map Utils`String to Utils`String := {|->};
		res := res ++ {
				"ID" |-> id, "Price" |-> Utils`toString[real](price), "Capacity" |-> Utils`toString[nat](capacity),
				"Area" |-> Utils`toString[real](area), "Heigth" |-> Utils`toString[real](heigth), 
				"Width" |-> Utils`toString[real](width), "Lenght" |-> Utils`toString[real](lenght), 
				"Air Condition" |-> Utils`toString[bool](airCondition), 
				"Natural Ligth" |-> Utils`toString[bool](naturalLigth),
				"Ceiling Lighting" |-> Utils`toString[bool](ceilingLighting),
				"Black Out Curtains" |-> Utils`toString[bool](blackOutCurtains),
				"Computer Network" |-> Utils`toString[bool](computerNetwork)
		};
		return res
	);
		
-- Add room to rooms set		
	public addRoom : Room ==> ()
		addRoom(r) == rooms := rooms union {r}
		pre r not in set rooms
		post	card rooms = card rooms~ + 1 and r in set rooms; 
		
-- Add foyer to foyers set
	public addFoyer : Foyer ==> ()
		addFoyer(f) == foyers := foyers union {f}
		pre f not in set foyers
		post	card foyers = card foyers~ + 1 and f in set foyers; 
		
-- Remove room from rooms set
	public removeRoom : Room ==> ()
		removeRoom(r) == rooms := rooms \ {r}
		pre r in set rooms
		post card rooms = card rooms~ - 1 and r not in set rooms;
		
-- Remove foyer from foyers set
	public removeFoyer : Foyer ==> ()
		removeFoyer(f) == foyers := foyers \ {f}
		pre f in set foyers
		post card foyers = card foyers~ - 1 and f not in set foyers;

--Verify if has installation
	public hasInstallation: Installation ==> bool
		hasInstallation(inst) == (
			if(isofclass(Foyer, inst)) then return (let f = narrow_(inst, Foyer) in f in set foyers)
			elseif(isofclass(Room, inst)) then return (let r = narrow_(inst, Room) in r in set rooms)
			else return false
		);

end Pavilion
