class Center
types
	public DateType = <begin> | <ending>;
	public UserPosition = <attendee> | <staff> | <host>;
values
 private adminName: Utils_vdm`String = "admin";
 private adminPass: Utils_vdm`String = "admin1234";
 
instance variables
	public name: Utils_vdm`String;
	public installations: map Utils_vdm`String to Installation;
	inv card dom installations > 0 and 
		forall id in set dom installations &  installations(id).id = id;
	public services: map Service`ServiceType to Service := {|->};
	inv forall type in set dom services & services(type).type = type;
	public events: map Utils_vdm`String to Event := {|->};
	public users: map Utils_vdm`String to User := {|->};
	
operations
	public Center:  Utils_vdm`String * Installation ==> Center
		Center(n, inst) == (
			let instID = inst.getID() in
			installations := {instID |-> inst};
			name := n;
		)
		post card dom installations = 1 and name = n;

--INSTALLATION OPERATIONS
--Show one installation information
	public showInstallationDetails: Utils_vdm`String ==> map Utils_vdm`String to Utils_vdm`String
	showInstallationDetails(inst) == return installations(inst).showDetails()
	pre inst in set dom installations;
	
--Show all intallations information
	public showInstallationsDetails: () ==> set of (map Utils_vdm`String to Utils_vdm`String)
	showInstallationsDetails() == (
	dcl res: set of (map Utils_vdm`String to Utils_vdm`String) := {};
	for all inst in set dom installations do res := res union {showInstallationDetails(inst)};
	return res
	)
	post card RESULT = card dom installations;

-- Add one installation to installations set		
	public addInstallations: Utils_vdm`String * Installation ==> ()
		addInstallations(uName, inst) == let instID = inst.getID() in 
		installations := installations ++ {instID |-> inst}
		pre uName in set dom users and uName = adminName and
			inst not in set rng installations and isofbaseclass(Installation, inst)
		post card dom installations = card dom installations~ + 1 and inst in set rng installations;
	
-- Add installation, foyer or room, to other installation, auditorium or pavilion\
	public addInstallationToInstallation: Utils_vdm`String * Utils_vdm`String * Installation ==> ()
	addInstallationToInstallation(uName, instID, inst1) == (
		installations := installations ++ {inst1.id |-> inst1};
		let inst2 = installations(instID) in (
			if(isofclass(Foyer, inst1)) then let foyer = narrow_(inst1, Foyer) in inst2.addFoyer(foyer)
			elseif(isofclass(Room, inst1)) then let room = narrow_(inst1, Room) in inst2.addRoom(room)
			--TODO: else error 
		)
	)
	pre uName in set dom users and uName = adminName and
		instID in set dom installations and
		(isofclass(Foyer, inst1) or isofclass(Room, inst1)) and
		not exists inst in set rng installations & (
			(isofclass(Auditorium, inst) or isofclass(Pavilion, inst)) and
			hasInstallation(inst1, inst)
		) and (
			(isofclass(Foyer, inst1) and (isofclass(Auditorium, installations(instID)) or isofclass(Pavilion, installations(instID)))) or
			(isofclass(Room, inst1) and isofclass(Pavilion, installations(instID)))
		)
	post inst1 in set rng installations
		and hasInstallation(inst1,installations(instID));
	
-- Remove installation, foyer or room, from other installation, auditorium or pavilion\
	public removeInstallationFromInstallation: Utils_vdm`String * Utils_vdm`String * Installation ==> ()
	removeInstallationFromInstallation(uName, instID, inst1) == (
		let inst2 = installations(instID) in (
			if(isofclass(Foyer, inst1)) then let foyer = narrow_(inst1, Foyer) in inst2.removeFoyer(foyer)
			elseif(isofclass(Room, inst1)) then let room = narrow_(inst1, Room) in inst2.removeRoom(room)
			--TODO: else error 
		)
	)
	pre uName in set dom users and uName = adminName and
		instID in set dom installations and
		inst1 in set rng installations and
		(isofclass(Foyer, inst1) or isofclass(Room, inst1)) and
		let inst = installations(instID) in hasInstallation(inst1, inst) and (
			(isofclass(Foyer, inst1) and (isofclass(Auditorium, installations(instID)) or isofclass(Pavilion, installations(instID)))) or
			(isofclass(Room, inst1) and isofclass(Pavilion, installations(instID)))
		)
	post inst1 in set rng installations and
	not hasInstallation(inst1, installations(instID));
	
--Remove installation from installations map
	public removeInstallation: Utils_vdm`String * Utils_vdm`String ==> ()
	removeInstallation(uName, instID) == (
		dcl instToRemove: set of Utils_vdm`String := {instID}; 
		for all inst in set rng installations \ {installations(instID)} do
			if(hasInstallation(inst, installations(instID))) then (instToRemove := instToRemove union {inst.id});
		installations := instToRemove <-: installations
	)
	pre uName in set dom users and uName = adminName and
		instID in set dom installations
	post instID not in set dom installations and
	not exists inst in set rng installations & hasInstallation(installations~(instID), inst);

--Edit installation measures
	public changeInstallationMeasures: Utils_vdm`String * Utils_vdm`String * nat * real * real * real ==> ()
	changeInstallationMeasures(uName, inst, c, h, w, l) == installations(inst).setMeasures(c, h, w, l)
	pre uName in set dom users and uName = adminName and
		inst in set dom installations;
		
--Edit installation price per day
	public changeInstallationRent: Utils_vdm`String * Utils_vdm`String * real ==> ()
	changeInstallationRent(uName, inst, pr) == installations(inst).setPrice(pr)
	pre uName in set dom users and uName = adminName and
		inst in set dom installations;
		
--Edit installation's conditions
	public changeInstallationConditions: Utils_vdm`String * Utils_vdm`String * bool * bool * bool * bool * bool * bool * bool * bool ==> ()
	changeInstallationConditions(uName, inst, airC, natL, ceilL, blackC, tele, compN, soundW, movW) == installations(inst).setConditions(airC, natL, ceilL, blackC, tele, compN, soundW, movW)
	pre uName in set dom users and uName = adminName and
		inst in set dom installations;

--Gets all the installations available in the given period
	public getAvailableInstallations: Utils_vdm`Date * Utils_vdm`Date ==> map Utils_vdm`String to Installation
	getAvailableInstallations(b, e) == (
		dcl tmpUsedInsts: set of Installation := {};
		dcl usedInsts: set of Installation := {};
		dcl tmpFreeInsts: map Utils_vdm`String to Installation := {|->};
		for all ev in set rng Utils_vdm`fMap[Utils_vdm`String, bool, Event](lambda x: Event & hasDatesConflict(x, b, e))(Utils_vdm`setTOseq[Utils_vdm`String](dom events), events) do (
			tmpUsedInsts :=  tmpUsedInsts union {ev.installation}
		);
		tmpFreeInsts := installations :-> usedInsts;
		usedInsts := tmpUsedInsts;
		for all inst1 in set rng tmpFreeInsts do (
			for all inst2 in set tmpUsedInsts do (
				if(inst1.hasInstallation(inst2)) then usedInsts :=  usedInsts union {inst1}
			)
		);
		return tmpFreeInsts :-> usedInsts;
	)
	pre Utils_vdm`before(b, e) or b = e
	post rng RESULT subset rng installations and
	forall ev in set rng Utils_vdm`fMap[Utils_vdm`String, bool, Event](lambda x: Event & hasDatesConflict(x, b, e))(Utils_vdm`setTOseq[Utils_vdm`String](dom events), events) &
	ev.installation not in set rng RESULT;
	
--Checks if this two installations are the same or associated
-- (if inst2 is part of inst1)
	public associatedInstallations: Installation * Installation ==> bool
	associatedInstallations(inst1, inst2) == (
		if(inst1 = inst2) then return true
		else inst1.hasInstallation(inst2)
	)
	pre {inst1, inst2} subset rng installations;

/** SERVICE OPERATIONS **/
--Show all services information
	public showServicesDetails: () ==> set of (map Utils_vdm`String to Utils_vdm`String)
	showServicesDetails() == (
	dcl res: set of (map Utils_vdm`String to Utils_vdm`String) := {};
	for all service in set rng services do res := res union {service.showDetails()};
	return res
	)
	post card RESULT = card dom services;
	
-- Add one service to services set
	public addService: Utils_vdm`String * Service ==> ()
		addService(uName, serv) == let type = serv.type in
		services := services ++ {type |-> serv}
		pre uName in set dom users and uName = adminName and
			serv not in set rng services
		post card dom services = card dom services~ + 1 and serv in set rng services;

--Remove service from services map
	public removeService: Utils_vdm`String * Service`ServiceType ==> ()
		removeService(uName, service) == (
			for all e in set rng events do (if(service in set elems e.services) then e.removeService(service));
			services := {service} <-: services
		)
		pre uName in set dom users and uName = adminName and
			service in set dom services
		post service not in set dom services and
			forall e in set rng events & service not in set elems e.services;
		
-- Changes a service price
	public changeServicePrice: Utils_vdm`String * Service`ServiceType * real ==> ()
	changeServicePrice(uName, serviceType, price) == let service = services(serviceType) in
	service.setPrice(price)
	pre uName in set dom users and uName = adminName and
		price > 0 and serviceType in set dom services
	post services(serviceType).price = price;

/** EVENT OPERATIONS **/
--Create an event	and add it to the events map
	public createEvent:  Utils_vdm`String * nat * real * Utils_vdm`Date * Utils_vdm`Date * bool * Event`EventType * Installation * Utils_vdm`String ==> Event
	createEvent(n, tTickets, tPrice, b, e, p, t, inst, h) == (
		dcl event: Event := new Event(n, tTickets, tPrice, b, e, p, t, inst, h);
		users(h).addEvent(n);
		events := events ++ {n |-> event};
		return event
	)
	pre h in set dom users and n not in set dom events and 
		(Utils_vdm`before(b, e) or b = e) and
		forall ev in set rng Utils_vdm`fMap[Utils_vdm`String, bool, Event](lambda x: Event & hasDatesConflict(x, b, e))(Utils_vdm`setTOseq[Utils_vdm`String](dom events), events) &
			ev.installation <> inst
	post n in set dom events;

--Show event information
	public showEventDetails: Utils_vdm`String * Utils_vdm`String ==> map Utils_vdm`String to Utils_vdm`String
	showEventDetails(uName, evName) == return events(evName).showDetails()
	pre uName in set dom users and 
	(if(events(evName).privacy) then (uName = adminName or uName in set 
		events(evName).guests union events(evName).staff union {events(evName).host})
		else true);
		
--Show the name of all events, but not the private events if uName is not a guest, staff or host
	public listEvents: Utils_vdm`String ==> set of Event
	listEvents(uName) == (
		dcl res: set of Event := {};
		for all event in set rng events do (
			if(event.privacy and uName in set (event.guests union {event.host, adminName} union event.staff))
				then res := res union {event}
			elseif(not event.privacy) then res := res union {event}
		);
		return res
	)
	pre uName in set dom users
	post RESULT subset rng events and forall e in set RESULT &
		not (e.privacy and uName not in set (e.guests union {e.host} union e.staff));
		
--Return the services used in one event
	public listEventServices: Utils_vdm`String ==> set of Service
	listEventServices(evName) == return rng (elems events(evName).services <: services)
	pre evName in set dom events
	post forall s in set RESULT & s.type in set dom services and s.type in set elems events(evName).services;
	
--Return the services available to add to the event
	public availableServicesForEvent: Utils_vdm`String ==> set of Service
	availableServicesForEvent(evName) == return rng (elems events(evName).services <-: services)
	pre evName in set dom events
	post forall s in set RESULT & s.type in set dom services and s.type not in set elems events(evName).services;

--Return how much an event spent in services
	public moneySpentWithServices: Utils_vdm`String * Utils_vdm`String ==> real
	moneySpentWithServices(uName, evName) == (
		dcl ev: Event := events(evName);
		dcl days: int := Utils_vdm`getDatesDifference(events(evName).begin, events(evName).ending) + 1;
		dcl res: real := 0;
		for all service in set elems ev.services do res := res + services(service).price * days;
		return res
	)
	pre uName in set dom users and (uName = events(evName).host or uName = adminName) and
	 evName in set dom events;
	
--Return how much an event spent with installation rent
	public moneySpentWithInstallation: Utils_vdm`String * Utils_vdm`String ==> real
	moneySpentWithInstallation(uName, evName) == (
		dcl days: int := Utils_vdm`getDatesDifference(events(evName).begin, events(evName).ending) + 1;
		return days * events(evName).installation.price
	)
	pre uName in set dom users and (uName = events(evName).host or uName = adminName) and
	 evName in set dom events;
	 
--In case of a private event, host can invite users (so they will be
-- the only ones capable of seeing and buying a ticket to the event)
	public inviteToEvent: Utils_vdm`String * Utils_vdm`String * Utils_vdm`String ==> ()
	inviteToEvent(evName, hName, uName) == events(evName).inviteUser(hName, uName)
	pre evName in set dom events and uName in set dom users and
		hName in set dom users and hName <> uName and
		events(evName).privacy = true
	post uName in set events(evName).guests;

--Shows all the available events
	public showAvailableEvents: Utils_vdm`String ==> [set of Event]
	showAvailableEvents(uName) == (
		dcl res: set of Event := {};
		for all e in set rng events do (
			if(card e.attendees = e.totalTickets) then skip
			else (
				if(e.privacy and uName in set e.guests union e.staff union {e.host, adminName}) then res := res union {e};
				if(not e.privacy) then res := res union {e}
			)
		);
		return res
	)
	pre uName in set dom users
	post RESULT subset rng events;

--Shows all the available events in a period
	public showAvailableEventsBetweenDates: Utils_vdm`String * Utils_vdm`Date * Utils_vdm`Date ==> [set of Event]
	showAvailableEventsBetweenDates(uName, b, e) == (
		dcl res: set of Event := {};
		for all ev in set rng events do 
			if(hasDatesConflict(ev, b, e)) then (
				if(card ev.attendees = ev.totalTickets) then skip;
				if(ev.privacy and uName in set ev.guests union ev.staff union {ev.host, adminName}) then res := res union {ev};
				if(not ev.privacy) then res := res union {ev}
			);
		return res	
	)
	pre uName in set dom users and (Utils_vdm`before(b, e) or b = e)
	post RESULT subset rng events and
		forall event in set RESULT & hasDatesConflict(event, b, e);
		
/** OPERATIONS TO CHANGE EVENTS ATTRIBUTES **/
--Change event name
	public changeEventName: Utils_vdm`String * Utils_vdm`String * Utils_vdm`String ==> ()
	changeEventName(evName, hName, value) == (
		dcl ev: Event := events(evName);
		ev.setName(value);
		for all user in set (ev.attendees union ev.staff union {ev.host}) do (
			users(user).events := (users(user).events \ {evName}) union {value}
		);
		events := ({evName} <-: events) ++ {value |-> ev}
	)
	pre evName in set dom events and value not in set dom events and
		hName in set dom users and events(evName).host = hName
	post evName not in set dom events and value in set dom events;

--Change event number of tickets
	public changeEventTotalTickets: Utils_vdm`String * Utils_vdm`String * nat ==> ()
	changeEventTotalTickets(evName, hName, value) == (
		dcl ev: Event := events(evName);
		ev.setTotalTickets(value)
		--events := events ++ {evName |-> ev} Se ev for uma referencia, nao e preciso atualizar
	)
	pre evName in set dom events and value > 0 and
		hName in set dom users and events(evName).host = hName
	post events(evName).totalTickets = value;

--Change event ticket price
	public changeEventTicketPrice: Utils_vdm`String * Utils_vdm`String * real ==> ()
	changeEventTicketPrice(evName, hName, value) == (
		dcl ev: Event := events(evName);
		ev.setTicketPrice(value)
		--events := events ++ {evName |-> ev}
	)
	pre evName in set dom events and value >= 0 and
		hName in set dom users and events(evName).host = hName
	post events(evName).ticketPrice = value;

--Change event date (begin or ending)
	public changeEventDate: Utils_vdm`String * Utils_vdm`String * DateType * Utils_vdm`Date ==> ()
	changeEventDate(evName, hName, dateType, value) == (
		dcl ev: Event := events(evName);
		cases dateType:
			<begin> -> ev.setBeginDate(value),
			<ending> -> ev.setEndingDate(value)
			--others -> error
			end
	)
	pre evName in set dom events and (dateType = <begin> or dateType = <ending>) and
		hName in set dom users and events(evName).host = hName and
		if(dateType = <begin>) then (forall e in set rng events \ {events(evName)} &
			not (hasDatesConflict(e, value, events(evName).ending) and e.installation = events(evName).installation))
		else (forall e in set rng events \ {events(evName)} &
			not (hasDatesConflict(e, events(evName).begin, value) and e.installation = events(evName).installation))
	post if(dateType = <begin>) then events(evName).begin = value
		else events(evName).ending = value;

--Change event privacy condition
	public changeEventPrivacy: Utils_vdm`String * Utils_vdm`String * bool ==> ()
	changeEventPrivacy(evName, hName, value) == (
		dcl ev: Event := events(evName);
		ev.setPrivacy(value)
	)
	pre evName in set dom events and
		hName in set dom users and events(evName).host = hName
	post events(evName).privacy = value;

--Change event type
	public changeEventType: Utils_vdm`String * Utils_vdm`String * Event`EventType ==> ()
	changeEventType(evName, hName, value) == (
		dcl ev: Event := events(evName);
		ev.setType(value)
	)
	pre evName in set dom events and
		hName in set dom users and events(evName).host = hName
	post events(evName).type = value;

--Change where event will occur
	public changeEventInstallation: Utils_vdm`String * Utils_vdm`String * Utils_vdm`String ==> ()
	changeEventInstallation(evName, hName, instName) == (
		dcl ev: Event := events(evName);
		ev.changeInstallation(installations(instName))
	)
	pre evName in set dom events and
		let b = events(evName).begin, e = events(evName).ending in (
			forall ev in set rng Utils_vdm`fMap[Utils_vdm`String, bool, Event](lambda x: Event & hasDatesConflict(x, b, e))(Utils_vdm`setTOseq[Utils_vdm`String](dom events), events) &
			instName <> ev.installation.id
		) and
		hName in set dom users and events(evName).host = hName
	post events(evName).installation.id = instName;

--Add service to event
	public addServiceToEvent: Utils_vdm`String * Utils_vdm`String * Service`ServiceType ==> ()
	addServiceToEvent(evName, hName, servType) == events(evName).addService(servType)
	pre evName in set dom events and servType in set dom services and
		hName in set dom users and events(evName).host = hName
	post servType in set elems events(evName).services;

--Remove service from event
	public removeServiceFromEvent: Utils_vdm`String * Utils_vdm`String * Service`ServiceType ==> ()
	removeServiceFromEvent(evName, hName, servType) == events(evName).removeService(servType)
	pre evName in set dom events and servType in set dom services and
		servType in set elems events(evName).services and
		hName in set dom users and events(evName).host = hName
	post servType not in set elems events(evName).services;
	
/** USER FUNCTIONS **/
--Show one user information
	public showUserDetails: Utils_vdm`String * Utils_vdm`String ==> map Utils_vdm`String to Utils_vdm`String
	showUserDetails(uName1, uName2) == (
		dcl res: map Utils_vdm`String to Utils_vdm`String := users(uName2).showDetails();
		dcl money: real := 0;
		for all evName in set users(uName2).events do if(uName2 in set events(evName).attendees) then money := money + events(evName).ticketPrice;
		res := res ++ {"Money spent"|->Utils_vdm`toStringVDM(money)};
		return res
	)
	pre uName1 in set dom users and uName2 in set dom users and
		(uName1 = adminName or uName1 = uName2)
	post  card dom RESULT = 3;
	
--Show all users information
	public showUsersDetails: Utils_vdm`String ==> set of (map Utils_vdm`String to Utils_vdm`String)
	showUsersDetails(uName) == (
		dcl res: set of (map Utils_vdm`String to Utils_vdm`String) := {};
		for all user in set dom users do res := res union {showUserDetails(uName, user)};
		return res
	)
	pre uName in set dom users and uName = adminName
	post  card RESULT = card dom users;

--Add user to our center
	public addUser: User ==> ()
	addUser(user) == users := users ++ {user.name |-> user}
	pre user.name not in set dom users
	post user in set rng users;
	
--Add user to event
	public addUserToEvent: Utils_vdm`String * Utils_vdm`String * UserPosition ==> ()
	addUserToEvent(evName, uName, uPos) == (
		dcl ev: Event := events(evName);
		dcl user: User := users(uName);
		cases uPos:
			<attendee> -> (ev.addAttendee(uName); user.addEvent(evName)),
			<staff> -> (ev.addStaff(uName); user.addEvent(evName)),
			<host> -> (users(ev.host).removeEvent(evName); ev.setHost(uName); user.addEvent(evName))
		end
	)
	pre evName in set dom events and uName in set dom users and
		uPos in set {<attendee>, <staff>, <host>}
	post evName in set users(uName).events;
	--Remove user from event
	public removeUserFromEvent: Utils_vdm`String * Utils_vdm`String * UserPosition ==> ()
	removeUserFromEvent(evName, uName, uPos) == (
		dcl ev: Event := events(evName);
		dcl user: User := users(uName);
		cases uPos:
			<attendee> -> (ev.removeAttendee(uName); user.removeEvent(evName)),
			<staff> -> (ev.removeStaff(uName); user.removeEvent(evName))
		end
	)
	pre evName in set dom events and uName in set dom users and
		uPos in set {<attendee>, <staff>}
	post evName not in set users(uName).events;

functions
-- Verify if an installation has a specific installation (room or foyer)
	public hasInstallation: Installation * Installation -> bool
	hasInstallation(inst1, inst2) == (
		if (isofclass(Auditorium, inst2)) then (
			let inst = narrow_(inst2, Auditorium) in
			if(isofclass(Foyer, inst1)) then let foyer = narrow_(inst1, Foyer) in foyer in set inst.foyers
			else false
		) elseif(isofclass(Pavilion, inst2)) then (
			let inst = narrow_(inst2, Pavilion) in
			if(isofclass(Foyer, inst1)) then let foyer = narrow_(inst1, Foyer) in foyer in set inst.foyers
			else(if(isofclass(Room, inst1)) then (let room = narrow_(inst1, Room) in room in set inst.rooms)else false)
		) else (
			false
		)
	)
	pre true;--(isofclass(Foyer, inst1) or isofclass(Room, inst1)) and
	--(isofclass(Auditorium, inst2) or isofclass(Pavilion, inst2));
	
--Checks if this event has conflicts with the period given in the arguments
	public hasDatesConflict: Event * Utils_vdm`Date * Utils_vdm`Date -> bool
	hasDatesConflict(ev, b2, e2) == (
		if(Utils_vdm`before(b2, ev.begin)) then Utils_vdm`before(ev.begin, e2)
		else Utils_vdm`before(b2, ev.ending)
	)
	pre (Utils_vdm`before(ev.begin, ev.ending) or ev.begin = ev.ending) 
		and (Utils_vdm`before(b2, e2) or b2 = e2);
	
end Center