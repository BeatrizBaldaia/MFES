class CenterTest  is subclass of Test_vdm
operations
 
 /***** USE CASE SCENARIOS ******/
 
 --Center Init
 	public createCenter: Utils_vdm`String * Installation ==> Center
 	createCenter(name, inst) == (
 		dcl res: Center := new Center(name, inst);
 		res.addUser(new User("admin", "admin1234"));
 		return res
 	)
 	post "admin" in set dom RESULT.users and card dom RESULT.installations = 1;
 	
--Changing installations
-- Here we add installations to the center, aggregate installations to other installations,
-- remove installations from other installations and from center and
-- change installations' attributes
	public testInstallations: Center ==> ()
	testInstallations(center) == (
		dcl room1: Installation := new Room("Room1", 15, 10, 7, 20, 20, false, true, true, true, false, false, true, false);
		dcl room2: Installation := new Room("Room2", 15, 10, 7, 20, 20, false, true, true, true, false, false, true, false);
		dcl pavilion1: Installation := new Pavilion("Pavilion1", 150, 50, 10, 50, 70, false, false, true, false, false);
		dcl pavilion2: Installation := new Pavilion("Pavilion2", 150, 50, 10, 50, 70, false, false, true, false, false);
		dcl foyer1: Installation := new Foyer("Foyer1", 10, 15, 4, 6, 6, false, true, false, true);
		dcl foyer2: Installation := new Foyer("Foyer2", 10, 15, 4, 6, 6, false, true, false, true);
		dcl foyer3: Installation := new Foyer("Foyer3", 10, 15, 4, 6, 6, false, true, false, true);
		dcl parking1: Installation := new CarParking("Car Parking1", 30, 50, 7, 50, 50);
		dcl auditorium1: Installation := new Auditorium("Auditorium1", 50, 120, 10, 40, 40, true, false, true, false, true, false);
		--Add installations
		center.addInstallations("admin", room1);
		center.addInstallations("admin", pavilion1);
		center.addInstallations("admin", pavilion2);
		assertTrue({room1, pavilion1} subset rng center.installations);
		
		center.addInstallations("admin", auditorium1);
		center.addInstallationToInstallation("admin", "Auditorium1", foyer1);
		assertTrue(center.associatedInstallations(auditorium1, foyer1));
		assertTrue(not center.hasInstallation(auditorium1, room1));
		assertTrue(not center.hasInstallation(room1, auditorium1));
		center.addInstallationToInstallation("admin", "Pavilion1", room1);
		center.addInstallationToInstallation("admin", "Pavilion1", room2);
		assertTrue(center.associatedInstallations(pavilion1, pavilion1));
		assertTrue(center.associatedInstallations(pavilion1, room1));
		center.addInstallationToInstallation("admin", "Pavilion1",  foyer2);
		center.addInstallationToInstallation("admin", "Pavilion2",  foyer3);
		assertEqual(narrow_(center.installations("Pavilion1"), Pavilion).rooms, {room1,room2});
		assertEqual(narrow_(center.installations("Pavilion1"), Pavilion).foyers, {foyer2});
		
		assertTrue(foyer2 in set rng center.installations);
		--Remove installations
		center.removeInstallationFromInstallation("admin", "Auditorium1", foyer1);
		assertTrue(not auditorium1.hasInstallation(foyer1));
		center.removeInstallationFromInstallation("admin", "Pavilion2", foyer3);
		assertTrue(not pavilion2.hasInstallation(foyer3));
		center.removeInstallationFromInstallation("admin", "Pavilion1", room1);
		assertEqual(narrow_(center.installations("Pavilion1"), Pavilion).rooms, {room2});
		assertTrue(room1 in set rng center.installations);
		
		center.addInstallationToInstallation("admin", "Pavilion1", foyer1);
		center.removeInstallation("admin", "Foyer2");
		center.removeInstallation("admin", "Pavilion1");
		center.removeInstallation("admin", "Foyer3");
		center.removeInstallation("admin", "Pavilion2");
		assertTrue(rng center.installations inter {pavilion1, foyer2} = {});
		--Change installation attributes
		center.addInstallations("admin", pavilion1);
		center.addInstallations("admin", foyer2);
		center.addInstallations("admin", parking1);
		center.changeInstallationMeasures("admin", "Room1", 20, 10, 10, 25);
		center.changeInstallationMeasures("admin", "Pavilion1", 20, 10, 10, 25);
		center.changeInstallationMeasures("admin", "Foyer2", 20, 10, 10, 25);
		center.changeInstallationMeasures("admin", "Car Parking1", 20, 10, 10, 25);
		center.changeInstallationMeasures("admin", "Auditorium1", 20, 10, 10, 25);
		assertTrue(room1.capacity = 20 and room1.heigth = 10 and room1.width = 10 and room1.lenght = 25);
		center.changeInstallationRent("admin", "Room1", 32);
		center.changeInstallationRent("admin", "Pavilion1", 32);
		center.changeInstallationRent("admin", "Foyer2", 32);
		center.changeInstallationRent("admin", "Car Parking1", 32);
		center.changeInstallationRent("admin", "Auditorium1", 32);
		assertEqual(room1.price, 32);
		center.changeInstallationConditions("admin", "Room1", true, true, true, true, true, true, true, true);
		center.changeInstallationConditions("admin", "Pavilion1", true, true, true, true, true, true, true, true);
		center.changeInstallationConditions("admin", "Foyer2", true, true, true, true, true, true, true, true);
		center.changeInstallationConditions("admin", "Car Parking1", true, true, true, true, true, true, true, true);
		center.changeInstallationConditions("admin", "Auditorium1", true, true, true, true, true, true, true, true);
		assertTrue(room1.airCondition and room1.naturalLigth and room1.ceilingLighting and room1.blackOutCurtains and 
			room1.telephones and room1.computerNetwork and room1.soundproofWalls and room1.movingWalls);
		assertTrue((parking1.airCondition or parking1.naturalLigth or parking1.ceilingLighting or parking1.blackOutCurtains and 
			parking1.telephones or parking1.computerNetwork or parking1.soundproofWalls or parking1.movingWalls) = false);
		
		assertEqual(card center.showInstallationsDetails(), card dom center.installations);
		center.addInstallations("admin", foyer1);
		
	)
	pre card dom center.installations = 1
	post card dom center.installations = 6;

--Simple action to add and remove a service from the center	
	public testServices: Center ==> ()
	testServices(center) == (
		dcl service1: Service := new Service(10, <AudioVisual>);
		
		center.addService("admin", service1);
		assertEqual(card dom center.services, 1);
		center.removeService("admin", <AudioVisual>);
		assertEqual(card dom center.services, 0);
		center.addService("admin", service1);
		assertEqual(card center.showServicesDetails(), 1)
	)
	pre card dom center.services = 0
	post card dom center.services = 1;

--Simple action of adding users to our center
	public testUsers: Center ==> ()
	testUsers(center) == (
		dcl user1: User := new User("User1", "1234");
		dcl user2: User := new User("User2", "1234");
		dcl user3: User := new User("User3", "1234");
		dcl user4: User := new User("User4", "1234");
		
		center.addUser(user1);center.addUser(user2);
		center.addUser(user3);center.addUser(user4);
		assertEqual(card dom center.users, 5);
		
	)
	pre card dom center.users = 1
	post card dom center.users = 5;

	public testEdge: Center ==> ()
	testEdge(center) == (
	(
		dcl pavilion3: Installation := new Pavilion("Pavilion3", 150, 50, 10, 50, 70, false, false, true, false, false);
		dcl foyer4: Installation := new Foyer("Foyer4", 10, 15, 4, 6, 6, false, true, false, true);
		center.addInstallations("admin", pavilion3);
		center.addInstallationToInstallation("admin", "Pavilion3", foyer4);
	);
	(

		dcl event2: Event := center.createEvent("Event2", 3, 10, mk_Utils_vdm`Date(2018, 12, 4), mk_Utils_vdm`Date(2018, 12, 4), false, <Conference>, center.installations("Pavilion3"), "User1");
		dcl event3: Event := center.createEvent("Event3", 3, 10, mk_Utils_vdm`Date(2018, 12, 5), mk_Utils_vdm`Date(2018, 12, 5), true, <Conference>, center.installations("Foyer4"), "User1");
		dcl event4: Event := center.createEvent("Event4", 3, 10, mk_Utils_vdm`Date(2018, 12, 6), mk_Utils_vdm`Date(2018, 12, 6), true, <Conference>, center.installations("Room1"), "User1");
		dcl event5: Event := center.createEvent("Event5", 3, 10, mk_Utils_vdm`Date(2018, 12, 7), mk_Utils_vdm`Date(2018, 12, 7), true, <Conference>, center.installations("Room1"), "User1");
		dcl service1: Service := new Service(10, <IT>);
		dcl d1: Utils_vdm`Date := mk_Utils_vdm`Date(2020, 2, 4);
		dcl d2: Utils_vdm`Date := mk_Utils_vdm`Date(2100, 2, 4);
		
		assertTrue("Pavilion3" not in set dom center.getAvailableInstallations(mk_Utils_vdm`Date(2018, 12, 4), mk_Utils_vdm`Date(2018, 12, 4)));
		assertTrue("Foyer4" not in set dom center.getAvailableInstallations(mk_Utils_vdm`Date(2018, 12, 4), mk_Utils_vdm`Date(2018, 12, 4)));
		assertTrue("Pavilion3" not in set dom center.getAvailableInstallations(mk_Utils_vdm`Date(2018, 12, 5), mk_Utils_vdm`Date(2018, 12, 5)));
		assertTrue("Foyer4" not in set dom center.getAvailableInstallations(mk_Utils_vdm`Date(2018, 12,5), mk_Utils_vdm`Date(2018, 12, 5)));
		
		
		center.addUserToEvent("Event3", "User2", <staff>);
		assertTrue("User2" in set event3.staff);
		center.addUserToEvent("Event3", "User3", <staff>);
		assertTrue("User3" in set event3.staff);
		center.addUserToEvent("Event3", "User2", <host>);
		assertEqual(event3.host, "User2");
		assertTrue(not "User2" in set event3.staff);
		center.removeUserFromEvent("Event3", "User3", <staff>);
		assertTrue(not "User3" in set event3.staff);
		
		center.addService("admin", service1);
		center.changeEventPrivacy("Event2", "User1", true);
		assertEqual(event2.privacy, true);
		assertEqual(event2.guests, event2.attendees);
		center.addServiceToEvent("Event2", "User1", <AudioVisual>);
		center.addServiceToEvent("Event2", "User1", <IT>);
		assertTrue(len event2.services = 2);
		
		assertTrue(center.listEventServices("Event2") union center.availableServicesForEvent("Event2") = rng center.services);
		center.removeService("admin", <IT>);
		assertTrue(len event2.services = 1);
		
		center.addService("admin", service1);
		assertTrue(center.listEventServices("Event2") union center.availableServicesForEvent("Event2") = rng center.services);
		assertTrue(center.listEvents("admin") = rng center.events);
		assertTrue(center.showAvailableEventsBetweenDates("admin",mk_Utils_vdm`Date(2018, 12, 7), mk_Utils_vdm`Date(2018, 12, 7)) = {event5});
		center.addUserToEvent("Event5", "User2", <attendee>);
		center.changeEventTotalTickets("Event5", "User1", 1);
		assertTrue(card event5.attendees = event5.totalTickets);
		assertTrue(center.showAvailableEventsBetweenDates("admin",mk_Utils_vdm`Date(2018, 12, 7), mk_Utils_vdm`Date(2018, 12, 7)) = {});
		assertTrue(center.showAvailableEvents("admin") = rng center.events \ {event5});
		
		assertEqual(center.showEventDetails("admin", "Event3")("Name"), "Event3");
		assertEqual(center.showEventDetails("User2", "Event3")("Name"), "Event3");
				
		assertTrue(center.events("Event3").earnedMoney() = 0);
		assertTrue(center.events("Event3").remainingTickets() = 3);
		
		assertTrue(Event`typetoStringVDM(<TeamBuilding>) ="Team Building");
		assertTrue(Event`typetoStringVDM(<TradeFair>) ="Trade Fair");
		assertTrue(Event`typetoStringVDM(<Musical>) ="Musical");
		
		assertTrue(Service`typetoStringVDM(<Catering>) ="Catering");
		assertTrue(Service`typetoStringVDM(<IT>) ="IT");
		assertTrue(Service`typetoStringVDM(<Cleaning>) ="Cleaning");
		assertTrue(Service`typetoStringVDM(<Security>) ="Security");
		assertTrue(Service`typetoStringVDM(<Decoration>) ="Decoration");

		assertEqual(Utils_vdm`getRemainder(1.33,0),33);
		assertEqual(Utils_vdm`mapNat(4),"4");
		assertEqual(Utils_vdm`mapNat(7),"7");
		assertEqual(Utils_vdm`mapNat(9),"9");

		assertTrue(Pavilion`sumElems([1, 0.1]) = 1.1);
		
		assertTrue(not center.users("admin").attendEvent("Event3"));
		
		assertTrue(center.showUserDetails("User1","User1")("Name") = "User1");

		center.changeEventDate("Event5", "User1", <ending>, mk_Utils_vdm`Date(2019, 12, 5));
		assertEqual(center.events("Event5").ending, mk_Utils_vdm`Date(2019, 12, 5));
		center.changeEventDate("Event5", "User1", <begin>, mk_Utils_vdm`Date(2019, 12, 2));
		assertEqual(center.events("Event5").begin, mk_Utils_vdm`Date(2019, 12, 2));
		
		)
	)
	
	pre card dom center.events = 1
	post card dom center.events = 5;

--Create an event and change its attributes (event details, services and installation)	
	public testEvent: Center ==> ()
	testEvent(center) == (
		dcl event1: Event := center.createEvent("Event1", 3, 10, mk_Utils_vdm`Date(2018, 12, 1), mk_Utils_vdm`Date(2018, 12, 3), true, <Conference>, center.installations("Room1"), "User1");

		--Check event and its availability to the users
		assertTrue("Room1" not in set dom center.getAvailableInstallations(mk_Utils_vdm`Date(2018, 12, 1), mk_Utils_vdm`Date(2018, 12, 3)));
		assertEqual(center.showAvailableEvents("User2"), {});
		center.inviteToEvent("Event1", "User1", "User2");
		assertEqual(center.showAvailableEvents("User2"), {event1});
		assertEqual(center.showAvailableEventsBetweenDates("User3", mk_Utils_vdm`Date(2018, 12, 1), mk_Utils_vdm`Date(2018, 12, 3)), {});
		--Add and remove services from event
		center.addServiceToEvent("Event1", "User1", <AudioVisual>);
		assertTrue(len event1.services = 1);
		center.removeServiceFromEvent("Event1", "User1", <AudioVisual>);
		assertTrue(len event1.services = 0);
		center.addServiceToEvent("Event1", "User1", <AudioVisual>);
		center.changeEventInstallation("Event1", "User1", "Foyer1");
		assertEqual(event1.installation.id, "Foyer1");
		--Change event attributes
		center.changeEventName("Event1", "User1", "New Event Name");
		assertEqual(event1.name, "New Event Name");
		center.changeEventTotalTickets("New Event Name", "User1", 6);
		assertEqual(event1.totalTickets, 6);
		center.changeEventTicketPrice("New Event Name", "User1", 5);
		assertEqual(event1.ticketPrice, 5);
		center.changeEventDate("New Event Name", "User1", <begin>, mk_Utils_vdm`Date(2018, 12, 2));
		assertEqual(event1.begin, mk_Utils_vdm`Date(2018, 12, 2));
		center.changeEventDate("New Event Name", "User1", <ending>, mk_Utils_vdm`Date(2018, 12, 5));
		assertEqual(event1.ending, mk_Utils_vdm`Date(2018, 12, 5));
		center.changeEventPrivacy("New Event Name", "User1", false);
		assertEqual(event1.privacy, false);
		assertEqual(center.showAvailableEventsBetweenDates("User3", mk_Utils_vdm`Date(2018, 12, 1), mk_Utils_vdm`Date(2018, 12, 3)), {event1});
		center.changeEventType("New Event Name", "User1", <Party>);
)	
	pre card dom center.events = 0
	post card dom center.events = 1;

--By changing differente external factors, like services' price,
-- installation's rent and number of attendees,
-- we will analise the money earned and lost with the event	
	public testEventProfit: Center ==> ()
	testEventProfit(center) == (
		dcl event1: Event := center.events("New Event Name");
		--Add users to the event and change their position in it (host, attendee or staff)
		center.addUserToEvent("New Event Name", "User2", <attendee>);
		assertTrue("User2" in set event1.attendees);
		center.addUserToEvent("New Event Name", "User3", <host>);
		assertEqual(event1.host, "User3");
		center.addUserToEvent("New Event Name", "User1", <staff>);
		assertTrue("User1" in set event1.staff);
		center.addUserToEvent("New Event Name", "User4", <attendee>);
		assertEqual(event1.attendees, {"User2", "User4"});
		center.addUserToEvent("New Event Name", "User4", <host>);
		center.addUserToEvent("New Event Name", "User3", <attendee>);
		assertEqual(event1.host, "User4");
		assertEqual(event1.attendees, {"User2", "User3"});
		center.removeUserFromEvent("New Event Name", "User3", <attendee>);
		assertEqual(event1.attendees, {"User2"});
		center.addUserToEvent("New Event Name", "User3", <attendee>);
		assertEqual(event1.attendees, {"User2", "User3"});
		assertEqual(center.showEventDetails("admin", "New Event Name")("Sold tickets"), "2, 0");
		let usersDetails = center.showUsersDetails("admin") in (
			for all userDetails in set usersDetails do (
				if(userDetails("Name") in set event1.attendees) then assertEqual(userDetails("Money spent"), "5, 0")
			)
		);
		--Check money spent with the event
		assertEqual(center.moneySpentWithServices("User4", "New Event Name"), 40);--since service (<AudioVisual>) price is 10 and event days are 4
		assertEqual(center.moneySpentWithServices("admin", "New Event Name"), 40);--since service (<AudioVisual>) price is 10 and event days are 4
		assertEqual(center.moneySpentWithInstallation("User4", "New Event Name"), 40);--since installation ("Foyer1") rent is 10 and event days are 4
		assertEqual(center.moneySpentWithInstallation("admin", "New Event Name"), 40);--since installation ("Foyer1") rent is 10 and event days are 4
		center.changeServicePrice("admin", <AudioVisual>, 30);
		assertEqual(center.services(<AudioVisual>).price, 30);
		assertEqual(center.moneySpentWithServices("User4", "New Event Name"), 120)--since service (<AudioVisual>) price is 10 and event days are 4
		
	)
	pre card dom center.events = 1;
 /***** TEST CASES WITH VALID INPUTS ******/
 
	public static main: () ==> ()
	main() ==
 (
 		dcl centerTest: CenterTest := new CenterTest(); 
		dcl center: Center := centerTest.createCenter("Super Center", new Foyer("Foyer1", 10, 15, 4, 6, 6, false, true, false, true));
		centerTest.testInstallations(center);
		centerTest.testServices(center);
		centerTest.testUsers(center);
		centerTest.testEvent(center);
		centerTest.testEventProfit(center);
		centerTest.testEdge(center);
	);
	  /***** TEST CASES WITH INVALID INPUTS (EXECUTE ONE AT A TIME) ******/
	public static testCreateRoomWithoutParameters: () ==> ()
	testCreateRoomWithoutParameters() == (
		dcl r : Room := new Room(); -- pre-condition fail
		skip;
	);
	public static testAddServicesWithoutAdmin: () ==> ()
	testAddServicesWithoutAdmin() == (
		dcl center: Center := new CenterTest().createCenter("Super Center", new Foyer("Foyer1", 10, 15, 4, 6, 6, false, true, false, true));
		center.addService("User1", new Service(10, <IT>)); -- pre-condition fail
	);
	public static testEventWithWrongDates: () ==> ()
	testEventWithWrongDates() == (
		dcl event: Event := new Event("WRONG", 10, 9.99, mk_Utils_vdm`Date(2019,1,1), mk_Utils_vdm`Date(2018,1,1), false, <Party>, new Foyer("Foyer1", 10, 15, 4, 6, 6, false, true, false, true), "ME");
		skip; -- pre-condition fail
	);
end CenterTest