class CenterTest  is subclass of Test
-- TODO not possible new Room(), teste failing
 --TODO addFoyer/ Room ; pre = false
operations
 
 /***** USE CASE SCENARIOS ******/
 
 --Center Init
 	public createCenter: Utils_vdm`String * Installation ==> Center
 	createCenter(name, inst) == (
 		dcl res: Center := new Center(name, inst);
 		res.addUser(new User("admin", "admin1234"));
 		return res
 	)
 	post "admin" in set dom RESULT.users and card dom RESULT.installations = 1;
 	
--Changing installations
-- Here we add installations to the center, aggregate installations to other installations,
-- remove installations from other installations and from center and
-- change installations' attributes
	public testInstallations: Center ==> ()
	testInstallations(center) == (
		dcl room1: Installation := new Room("Room1", 15, 10, 7, 20, 20, false, true, true, true, false, false, true, false);
		dcl pavilion1: Installation := new Pavilion("Pavilion1", 150, 50, 10, 50, 70, false, false, true, false, false);
		dcl foyer2: Installation := new Foyer("Foyer2", 10, 15, 4, 6, 6, false, true, false, true);
		dcl parking1: Installation := new CarParking("Car Parking1", 30, 50, 7, 50, 50);
		dcl auditorium1: Installation := new Auditorium("Auditorium1", 50, 120, 10, 40, 40, true, false, true, false, true, false);
		--Add installations
		center.addInstallations("admin", room1);
		center.addInstallations("admin", pavilion1);
		assertTrue({room1, pavilion1} subset rng center.installations);
		
		center.addInstallationToInstallation("admin", "Pavilion1", room1);
		assertTrue(center.associatedInstallations(pavilion1, pavilion1));
		assertTrue(center.associatedInstallations(pavilion1, room1));
		center.addInstallationToInstallation("admin", "Pavilion1",  foyer2);
		assertEqual(narrow_(center.installations("Pavilion1"), Pavilion).rooms, {room1});
		assertEqual(narrow_(center.installations("Pavilion1"), Pavilion).foyers, {foyer2});
		assertTrue(foyer2 in set rng center.installations);
		--Remove installations
		center.removeInstallationFromInstallation("admin", "Pavilion1", room1);
		assertEqual(narrow_(center.installations("Pavilion1"), Pavilion).rooms, {});
		assertTrue(room1 in set rng center.installations);
		center.removeInstallation("admin", "Pavilion1");
		assertTrue(rng center.installations inter {pavilion1, foyer2} = {});
		--Change installation attributes
		center.addInstallations("admin", pavilion1);
		center.addInstallations("admin", foyer2);
		center.addInstallations("admin", parking1);
		center.addInstallations("admin", auditorium1);
		center.changeInstallationMeasures("admin", "Room1", 20, 10, 10, 25);
		center.changeInstallationMeasures("admin", "Pavilion1", 20, 10, 10, 25);
		center.changeInstallationMeasures("admin", "Foyer2", 20, 10, 10, 25);
		center.changeInstallationMeasures("admin", "Car Parking1", 20, 10, 10, 25);
		center.changeInstallationMeasures("admin", "Auditorium1", 20, 10, 10, 25);
		assertTrue(room1.capacity = 20 and room1.heigth = 10 and room1.width = 10 and room1.lenght = 25);
		center.changeInstallationRent("admin", "Room1", 32);
		center.changeInstallationRent("admin", "Pavilion1", 32);
		center.changeInstallationRent("admin", "Foyer2", 32);
		center.changeInstallationRent("admin", "Car Parking1", 32);
		center.changeInstallationRent("admin", "Auditorium1", 32);
		assertEqual(room1.price, 32);
		center.changeInstallationConditions("admin", "Room1", true, true, true, true, true, true, true, true);
		center.changeInstallationConditions("admin", "Pavilion1", true, true, true, true, true, true, true, true);
		center.changeInstallationConditions("admin", "Foyer2", true, true, true, true, true, true, true, true);
		center.changeInstallationConditions("admin", "Car Parking1", true, true, true, true, true, true, true, true);
		center.changeInstallationConditions("admin", "Auditorium1", true, true, true, true, true, true, true, true);
		assertTrue(room1.airCondition and room1.naturalLigth and room1.ceilingLighting and room1.blackOutCurtains and 
			room1.telephones and room1.computerNetwork and room1.soundproofWalls and room1.movingWalls);
		assertTrue((parking1.airCondition or parking1.naturalLigth or parking1.ceilingLighting or parking1.blackOutCurtains and 
			parking1.telephones or parking1.computerNetwork or parking1.soundproofWalls or parking1.movingWalls) = false);
		
		assertEqual(card center.showInstallationsDetails(), card dom center.installations)	
	)
	pre card dom center.installations = 1
	post card dom center.installations = 6;

--Simple action to add and remove a service from the center	
	public testServices: Center ==> ()
	testServices(center) == (
		dcl service1: Service := new Service(10, <AudioVisual>);
		
		center.addService("admin", service1);
		assertEqual(card dom center.services, 1);
		center.removeService("admin", <AudioVisual>);
		assertEqual(card dom center.services, 0);
		center.addService("admin", service1);
		assertEqual(card center.showServicesDetails(), 1)
	)
	pre card dom center.services = 0
	post card dom center.services = 1;

--Simple action of adding users to our center
	public testUsers: Center ==> ()
	testUsers(center) == (
		dcl user1: User := new User("User1", "1234");
		dcl user2: User := new User("User2", "1234");
		dcl user3: User := new User("User3", "1234");
		dcl user4: User := new User("User4", "1234");
		
		center.addUser(user1);center.addUser(user2);
		center.addUser(user3);center.addUser(user4);
		assertEqual(card dom center.users, 5);
		
		assertEqual(card center.showUsersDetails("admin"), 5)
	)
	pre card dom center.users = 1
	post card dom center.users = 5;
	
	public testEvent: Center ==> ()
	testEvent(center) == (
		dcl event1: Event := center.createEvent("Event1", 3, 10, mk_Utils_vdm`Date(2018, 12, 1), mk_Utils_vdm`Date(2018, 12, 3), true, <Conference>, center.installations("Room1"), "User1");
		dcl user1: User := center.users("User1");
		dcl user2: User := center.users("User2");
		
		assertTrue("Room1" not in set dom center.getAvailableInstallations(mk_Utils_vdm`Date(2018, 12, 1), mk_Utils_vdm`Date(2018, 12, 3)));
		assertEqual(center.showAvailableEvents("User2"), {});
		center.inviteToEvent("Event1", "User1", "User2");
		assertEqual(center.showAvailableEvents("User2"), {event1})
	)
	pre card dom center.events = 0;
 /***** TEST CASES WITH VALID INPUTS ******/
 
  /***** TEST CASES WITH INVALID INPUTS (EXECUTE ONE AT A TIME) ******/

	public static main: () ==> ()
	main() ==
 (
 		dcl centerTest: CenterTest := new CenterTest(); 
		dcl center: Center := centerTest.createCenter("Super Center", new Foyer("Foyer1", 10, 15, 4, 6, 6, false, true, false, true));
		centerTest.testInstallations(center);
		centerTest.testServices(center);
		centerTest.testUsers(center);
		centerTest.testEvent(center);

		new InstallationTest().testAll();
		new EventTest().testAll();
		new ServiceTest().testAll();
		new UserTest().testAll();
		
	);
end CenterTest