class EventTest is subclass of Test
operations

/***** USE CASE SCENARIOS ******/

--Create an event
	public createEvent: Utils`String * nat * real * Utils`Date * Utils`Date * bool * Event`EventType * Installation * Utils`String ==> Event
	createEvent(n, tTickets, tPrice, b, e, p, t, inst, h) == (
		dcl event: Event := new Event(n, tTickets, tPrice, b, e, p, t, inst, h);
		return event
	);
	
--Add services to the event
	public addServices: Event * [seq of Service`ServiceType] ==> ()
	addServices(event, services) == (
		dcl oldServicesSet: seq of Service`ServiceType := event.services;
		for all s in set elems services do (event.addService(s));
		assertEqual(event.services, oldServicesSet ^ services)
	)
	pre event <> undefined
	post elems services subset elems event.services;

--Remove services from event
	public removeServices: Event * [seq of Service`ServiceType] ==> ()
	removeServices(event, services) == (
		for all s in set elems services do (event.removeService(s));
		assertTrue(forall service in seq event.services & service not in set elems services)
	)
	pre card elems services = len services
	post elems services inter elems event.services = {};

--Change event's installation
	public changeInstallation: Event * seq of Installation ==> ()
	changeInstallation(event, installations) == (
		dcl tmpInstallations: seq of Installation := installations;
		while(tmpInstallations <> []) do (
			event.changeInstallation(hd tmpInstallations);
			tmpInstallations := tl tmpInstallations
		);
		assertEqual(event.installation, installations(len installations))
	)
	pre event <> undefined and len installations > 0
	post event.installation = installations(len installations);

--Analise the event properties and gains
	public analiseEvent: Event * real * nat ==> ()
	analiseEvent(event, earned, remaining) == (
		assertEqual(event.earnedMoney(), earned);
		assertEqual(event.remainingTickets(), remaining)
	)
	pre earned >= 0 and remaining >= 0;
	
--Change event users
	public changeEventUsers: Event * Utils`String * set of Utils`String * Utils`String *  bool ==> ()
	changeEventUsers(event, type, users, host, add) == (
		cases type:
			("attendees") -> (
				if(add) then (for all user in set users do event.addAttendee(user); assertTrue(users subset event.attendees))
				else (for all user in set users do event.removeAttendee(user); assertTrue(not users subset event.attendees));
			),
			("staff") -> (
				if(add) then (for all user in set users do event.addStaff(user); assertTrue(users subset event.staff))
				else (for all user in set users do event.removeStaff(user); assertTrue(not users subset event.staff));
			),
			("host") -> (
				for all user in set users do event.setHost(user);
				assertTrue(event.host in set users);
				assertTrue(users inter event.attendees = {});
				assertTrue(users inter event.staff = {});
			),
			("guests") -> (
				for all user in set users do event.inviteUser(host, user);
				assertTrue(users subset event.guests)
			)
		end
	)
	pre type in set {"attendees", "staff", "host", "guests"} and host = event.host;
	
--Display event information
	public showEventDetails: Event ==> ()
	showEventDetails(event) == (
		dcl res: map Utils`String to Utils`String := event.showDetails();
		if(event.privacy) then assertEqual(card dom res, 14)
		else assertEqual(card dom res, 13)
	);
	

 /***** TEST CASES WITH VALID INPUTS ******/
 
 --Run all tests with valid inputa
 	public testAll: () ==> ()
 	testAll() == (
 		dcl room1: Installation := new Room("Room1", 15, 10, 7, 20, 20, false, true, true, true, false, false, true, false);
		dcl room2: Installation := new Room("Room2", 10, 5, 4, 10, 20, true, false, true, true, false, false, true, true);
		dcl pavilion1: Installation := new Pavilion("Pavilion1", 150, 50, 10, 50, 70, false, false, true, false, false);
		dcl pavilion2: Installation := new Pavilion("Pavilion2", 220, 60, 15, 60, 70, true, false, true, false, true);
		dcl foyer1: Installation := new Foyer("Foyer1", 10, 15, 4, 6, 6, false, true, false, true);
		dcl event: Event := new Event("Exit Games", 5, 10, mk_Utils`Date(2018, 12, 28), mk_Utils`Date(2018, 12, 28), true, <TeamBuilding>, room1, "Beatriz");
		addServices(event, [<AudioVisual>, <Catering>, <IT>]);
		removeServices(event, [<AudioVisual>, <IT>]);
		changeInstallation(event, [room2, pavilion1, room1, pavilion1]);
		analiseEvent(event, 0, 5);
		changeEventUsers(event, "guests", {"Ana", "Tiago"}, "Beatriz", true);
		changeEventUsers(event, "attendees", {"Ana", "Tiago"}, "Beatriz", true);
		changeEventUsers(event, "attendees", {"Tiago"}, "Beatriz", false);
		changeEventUsers(event, "staff", {"eduardo"}, "Beatriz", true);
		changeEventUsers(event, "host", {"Tiago"}, "Beatriz", true);
		changeEventUsers(event, "guests", {"Beatriz"}, "Tiago", true);
		showEventDetails(event)
 	);
 /***** TEST CASES WITH INVALID INPUTS (EXECUTE ONE AT A TIME) ******/
 
 
end EventTest