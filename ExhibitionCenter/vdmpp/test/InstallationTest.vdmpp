class InstallationTest is subclass of Test
operations
	public static main: () ==> ()
	main() == (
		dcl i : InstallationTest := new InstallationTest();
		i.testHasInstallation();
		i.testAddInstallation();
		i.testaddInstallationToInstallation();
		i.testremoveInstallationFromInstallation();
		i.testremoveInstallation();
	);
	private testHasInstallation: () ==> ()
	testHasInstallation() == (
		dcl inst_0 : Auditorium := new Auditorium("Aud", 1,1,1,1, true, true, true, true, true, true);
		dcl inst_1 : Foyer := new Foyer("Foyer",1,1,1,1,true,true,true,true);
		dcl inst_2 : Pavilion := new Pavilion("Pav",1,1,1,1,false,false,false,false,false);
		dcl inst_3 : CarParking := new CarParking("Parking",100,1,1,1);
		assertTrue(not inst_2.hasInstallation(inst_3));
		assertTrue(not inst_3.hasInstallation(inst_2));
		assertTrue(not inst_1.hasInstallation(inst_2));
		assertTrue(not inst_0.hasInstallation(inst_2));
	);
	private testAddInstallation: () ==> ()
	testAddInstallation() == (
		dcl inst_0 : Auditorium := new Auditorium("Aud", 1,1,1,1, true, true, true, true, true, true);
		dcl c : Center := new Center("Center", new Room("Room", 1,1,1,1,false,false,false,false,false,false,false,false));
		assertTrue(not inst_0.id in set dom c.installations);
		c.addInstallations(inst_0);
		assertTrue(inst_0.id in set dom c.installations);
	);
	private testaddInstallationToInstallation: () ==> ()
	testaddInstallationToInstallation() == (
		dcl c : Center := new Center("Center", new Room("Room", 1,1,1,1,false,false,false,false,false,false,false,false));
		dcl inst_0 : Auditorium := new Auditorium("Aud", 1,1,1,1, true, true, true, true, true, true);
		dcl inst_1 : Foyer := new Foyer("Foyer",1,1,1,1,true,true,true,true);
		dcl inst_2 : Room := new Room("R",1,1,1,1,true,true,true,true,true,true,true,true);
		dcl inst_3 : Pavilion := new Pavilion("Pav",1,1,1,1,false,false,false,false,false);
		dcl inst_4 : Foyer := new Foyer("F",1,1,1,1,true,true,true,true);
		
		c.addInstallations(inst_0);
		c.addInstallations(inst_3);
		
		assertTrue(not inst_0.hasInstallation(inst_2));
		assertTrue(not inst_0.hasInstallation(inst_1));
		c.addInstallationToInstallation(inst_0.id, inst_1);
		assertTrue(not inst_0.hasInstallation(inst_2));
		assertTrue(inst_0.hasInstallation(inst_1));
		
		assertTrue(not inst_3.hasInstallation(inst_2));
		assertTrue(not inst_3.hasInstallation(inst_4));
		c.addInstallationToInstallation(inst_3.id, inst_2);
		c.addInstallationToInstallation(inst_3.id, inst_4);
		assertTrue(c.associatedInstallations(inst_3, inst_2));
		assertTrue(c.associatedInstallations(inst_3, inst_4));
		assertTrue(not c.associatedInstallations(inst_2,inst_3));
		assertTrue(inst_3.hasInstallation(inst_2));
		assertTrue(inst_3.hasInstallation(inst_4));
	);
	private testremoveInstallationFromInstallation: () ==> ()
	testremoveInstallationFromInstallation() == (
		dcl c : Center := new Center("Center", new Room("Room", 1,1,1,1,false,false,false,false,false,false,false,false));
		dcl inst_0 : Auditorium := new Auditorium("Aud", 1,1,1,1, true, true, true, true, true, true);
		dcl inst_1 : Foyer := new Foyer("Foyer",1,1,1,1,true,true,true,true);
		dcl inst_2 : Pavilion := new Pavilion("Pav",1,1,1,1,false,false,false,false,false);
		dcl inst_3 : Room := new Room("R",1,1,1,1,true,true,true,true,true,true,true,true);
		dcl inst_4 : Foyer := new Foyer("F",1,1,1,1,true,true,true,true);
		c.addInstallations(inst_0);
		c.addInstallationToInstallation(inst_0.id, inst_1);

		assertTrue(inst_0.hasInstallation(inst_1));
		c.removeInstallationFromInstallation(inst_0.id, inst_1);
		assertTrue(not inst_0.hasInstallation(inst_1)); 

		c.addInstallations(inst_2);
		c.addInstallationToInstallation(inst_2.id, inst_3);
		c.addInstallationToInstallation(inst_2.id, inst_4);
		
		assertTrue(inst_2.hasInstallation(inst_3));
		assertTrue(inst_2.hasInstallation(inst_4));
		c.removeInstallationFromInstallation(inst_2.id, inst_3);
		c.removeInstallationFromInstallation(inst_2.id, inst_4);
		assertTrue(not c.associatedInstallations(inst_2, inst_3));
		assertTrue(not c.associatedInstallations(inst_3,inst_2));
		assertTrue(not inst_2.hasInstallation(inst_3));
		assertTrue(not inst_2.hasInstallation(inst_4));
	);

	private testremoveInstallation: () ==> ()
	testremoveInstallation() == (
		dcl c : Center := new Center("Center", new Room("Room", 1,1,1,1,false,false,false,false,false,false,false,false));
		dcl inst_0 : Auditorium := new Auditorium("Aud", 1,1,1,1, true, true, true, true, true, true);
		dcl inst_1 : Foyer := new Foyer("Foyer",1,1,1,1,true,true,true,true);
		dcl inst_2 : Room := new Room("R",1,1,1,1,true,true,true,true,true,true,true,true);
		c.addInstallations(inst_0);
		c.addInstallations(inst_1);
		c.addInstallations(inst_2);
		
		assertTrue(c.installations("Foyer") = inst_1);
		assertTrue(c.installations("R") = inst_2);
		c.removeInstallation("Foyer");
		c.removeInstallation("R");
		assertTrue("Foyer" not in set dom c.installations);
		assertTrue("R" not in set dom c.installations);
		
		c.addInstallationToInstallation(inst_0.id, inst_1);
		c.removeInstallation("Foyer");
		assertTrue("Foyer" not in set dom c.installations);
		assertTrue(not inst_0.hasInstallation(inst_1)); 
	);
end InstallationTest