class InstallationTest
operations
	private assertTrue: bool ==> ()
	 assertTrue(cond) == return
	 pre cond;
	public static main: () ==> ()
	  main() ==
	 (
	 new InstallationTest().testInstallations();
	 );
	private testInstallations: () ==> ()
	 testInstallations() ==
	 (
	 dcl name : Utils`String := "Test";
	 dcl room : Room := new Room(name, 1,1,1,1,false,false,false,false,false,false,false,false);
	 dcl c : Center := new Center(name, room);
	 dcl name_1 : Utils`String := "Foyer";
	 dcl inst_0 : Auditorium := new Auditorium("Aud", 1,1,1,1, true, true, true, true, true, true);
	 dcl inst_1 : Foyer := new Foyer(name_1,1,1,1,1,true,true,true,true);
	 dcl inst_2 : Pavilion := new Pavilion("Pav",1,1,1,1,false,false,false,false,false);
	 dcl inst_3 : CarParking := new CarParking("Parking",100,1,1,1);
		c.addInstallations(inst_3);
		assertTrue(not inst_0.id in set dom c.installations);
		c.addInstallations(inst_0);
		assertTrue(inst_0.id in set dom c.installations);
		assertTrue(inst_0 = c.installations(inst_0.id));
		assertTrue(not inst_2.hasInstallation(inst_3));
		assertTrue(not inst_3.hasInstallation(inst_2));
		assertTrue(not inst_1.hasInstallation(inst_2));
		assertTrue(not inst_0.hasInstallation(inst_2));
	 assertTrue(not inst_2.id in set dom c.installations);
	 c.addInstallations(inst_2);
	 assertTrue(inst_2.id in set dom c.installations);
	 assertTrue(inst_2 = c.installations(inst_2.id));
	 
	 
	 assertTrue(not inst_0.hasInstallation(room));
	 assertTrue(not inst_0.hasInstallation(inst_1));
	 c.addInstallationToInstallation(inst_0.id, inst_1);
	 assertTrue(not inst_0.hasInstallation(room));
	 assertTrue(inst_0.hasInstallation(inst_1));
	 
	 assertTrue(not inst_0.hasInstallation(room));
	 assertTrue(inst_0.hasInstallation(inst_1));
	 c.removeInstallationFromInstallation(inst_0.id, inst_1);
	 assertTrue(not inst_0.hasInstallation(room));
	 assertTrue(not inst_0.hasInstallation(inst_1)); 
	 
	 
	 assertTrue(not inst_2.hasInstallation(room));
	 assertTrue(not inst_2.hasInstallation(inst_1));
	 assertTrue(not c.associatedInstallations(inst_2, room));
	 c.addInstallationToInstallation(inst_2.id, room);
	 c.addInstallationToInstallation(inst_2.id, inst_1);
	 assertTrue(c.associatedInstallations(inst_2, room));
	 assertTrue(c.associatedInstallations(inst_2, inst_2));
	 assertTrue(not c.associatedInstallations(room,inst_2)); -- Room is not associated to pavillion
	 assertTrue(inst_2.hasInstallation(room));
	 assertTrue(inst_2.hasInstallation(inst_1));
	 
	 
		assertTrue(inst_2.hasInstallation(room));
		assertTrue(inst_2.hasInstallation(inst_1));
		c.removeInstallationFromInstallation(inst_2.id, room);
		c.removeInstallationFromInstallation(inst_2.id, inst_1);
		assertTrue(not c.associatedInstallations(inst_2, room));
		assertTrue(not c.associatedInstallations(room,inst_2));
		assertTrue(not inst_2.hasInstallation(room));
		assertTrue(not inst_2.hasInstallation(inst_1)); 
		
		assertTrue(c.installations("Foyer") = inst_1);
		assertTrue(c.installations("Test") = room);
		c.removeInstallation("Foyer");
		c.removeInstallation("Test");
		assertTrue("Foyer" not in set dom c.installations);
		assertTrue("Test" not in set dom c.installations);
		
		
		c.addInstallationToInstallation(inst_0.id, inst_1);
		c.removeInstallation("Foyer");
		assertTrue("Foyer" not in set dom c.installations);
		assertTrue(not inst_0.hasInstallation(inst_1)); 
	);
end InstallationTest