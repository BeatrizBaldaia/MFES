class InstallationTest is subclass of Test
operations

/******* USE CASE SCENARIOS *******/

-- Add Installation
	public testAddFoyer: Installation * Foyer ==> ()
	testAddFoyer(inst, foy) == (
		inst.addFoyer(foy);
		assertTrue(inst.hasInstallation(foy));
	);
	public testAddRoom: Installation * Room ==> ()
	testAddRoom(inst, ro) == (
		inst.addRoom(ro);
		assertTrue(inst.hasInstallation(ro));
	);
	public testRemoveFoyer: Installation * Foyer ==> ()
	testRemoveFoyer(inst, foy) == (
		inst.removeFoyer(foy);
		assertTrue(not inst.hasInstallation(foy));
	);
	public testRemoveRoom: Installation * Room ==> ()
	testRemoveRoom(inst, ro) == (
		inst.removeRoom(ro);
		assertTrue(not inst.hasInstallation(ro));
	);
	
-- Set Price
	public testChangePrice: Installation * real ==> ()
	testChangePrice(inst, pr) == (
		inst.setPrice(pr);
		assertTrue(inst.price = pr);
	);
-- Set Measures
	public testSetMeasures: Installation * nat * real* real * real ==> ()
	testSetMeasures(inst, c, h, w, l) == (
		inst.setMeasures(c,h,w,l);
		assertTrue(inst.capacity = c);
		assertTrue(inst.heigth = h);
		assertTrue(inst.width = w);
		assertTrue(inst.lenght = l);
	);
-- Set Conditions
	public testSetConditions: Installation * bool * bool * bool * bool * bool * bool * bool * bool ==> ()
	testSetConditions(inst, airC, natL, ceilL, blackC, tele, compN, soundW, movW) == (
		inst.setConditions(airC, natL, ceilL, blackC, tele, compN, soundW, movW);
		assertTrue(inst.airCondition = airC);
		assertTrue(inst.naturalLigth = natL);
		assertTrue(inst.ceilingLighting = ceilL);
		assertTrue(inst.blackOutCurtains = blackC);
		assertTrue(inst.telephones = tele);
		assertTrue(inst.computerNetwork = compN);
		assertTrue(inst.soundproofWalls = soundW);
		assertTrue(inst.movingWalls = movW);
	);
	public testAll: () ==> ()
	testAll() == (
		dcl room1: Installation := new Room("Room1", 15, 10, 7, 20, 20, false, true, true, true, false, false, true, false);
		dcl pavilion1: Installation := new Pavilion("Pavilion1", 150, 50, 10, 50, 70, false, false, true, false, false);
		dcl foyer1: Installation := new Foyer("Foyer1", 10, 15, 4, 6, 6, false, true, false, true);
		dcl auditorium1: Auditorium := new Auditorium("Auditorium1", 10, 15, 4, 6, 6, false, true, false, true, true, true);
		
		testAddFoyer(pavilion1,foyer1);
		testAddRoom(pavilion1, room1);
		testRemoveFoyer(pavilion1,foyer1);
		testRemoveRoom(pavilion1, room1);
		testAddFoyer(auditorium1,foyer1);
		testRemoveFoyer(auditorium1,foyer1);
		
		testChangePrice(room1, 100);
		testSetMeasures(room1, 1, 1, 1, 1);
		testSetConditions(room1,false,false,false,false,false,false,false,false);
		testSetConditions(room1,true,true,true,true,true,true,true,true);
		testSetConditions(pavilion1,false,false,false,false,false,false,false,false);
		testSetConditions(pavilion1,true,true,true,true,true,true,true,true);
		testSetConditions(foyer1,false,false,false,false,false,false,false,false);
		testSetConditions(foyer1,true,true,true,true,true,true,true,true);
	);
	
	-- TODO TEST WITH INVALID INPUTS
end InstallationTest