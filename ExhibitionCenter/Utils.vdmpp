class Utils
types
	public Date :: 	year : nat
									month: nat
									day : nat
				inv d == d.month <= 12 and d.day <= DaysOfMonth(d.year, d.month);
	public String :: seq of char;
values
functions
	public DaysOfMonth: nat * nat -> nat 
	DaysOfMonth(y, m) ==
				if (m = 2)
				then
						(if (isLeapYear(y))
						then 29
						else 28)
        else (31 - (m - 1) mod 7 mod 2)
	pre y > 0 and m > 0 and m < 13;
	-- TODO: post
	
	public before: Date * Date -> bool 
	before(b, a) ==
		b.year < a.year or
		(b.year = a.year and b.month < a.month) or
		(b.year = a.year and b.month = a.month and b.day < a.day)
		;
	-- TODO: pre post
	
	public isLeapYear: nat -> bool
	isLeapYear(y) == 
		y mod 4 = 0 and y mod 100 <> 0 or y mod 400 = 0
	pre y > 0;
traces
end Utils